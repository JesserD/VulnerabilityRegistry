using Domain;
using Microsoft.EntityFrameworkCore;
namespace Persistence;

public interface IVulnerabilityRepository
{
    public Task<Vulnerability?> GetById(string id);
    public IQueryable<Vulnerability> GetAll();
    public Task<bool> Add(Vulnerability vulnerability);
    public Task<bool> Update(string id, Vulnerability vulnerability);
    public Task<bool> Delete(Vulnerability vulnerability);
}

public class VulnerabilityRepository(DataContext _context) : IVulnerabilityRepository
{
    public Task<Vulnerability?> GetById(string id) =>
        _context.Vulnerabilities.SingleOrDefaultAsync(v => v.Id.Equals(id));
    
    public IQueryable<Vulnerability> GetAll() =>
        _context.Vulnerabilities.AsQueryable();

    public async Task<bool> Add(Vulnerability vulnerability)
    {
        _context.Vulnerabilities.Add(vulnerability);
        return await _context.SaveChangesAsync() > 0;
    }
    
    public async Task<bool> Update(string id, Vulnerability updatedVulnerability)
    {
        var vulnerability = await _context.Vulnerabilities.FindAsync(id);

        if (vulnerability is null) return false;

        vulnerability.SpecVersion = updatedVulnerability.SpecVersion ?? vulnerability.SpecVersion;
        vulnerability.Name = updatedVulnerability.Name ?? vulnerability.Name;
        vulnerability.Description = updatedVulnerability.Description ?? vulnerability.Description;
        vulnerability.Modified = DateTime.UtcNow;

        return await _context.SaveChangesAsync() > 0;
    }

    public async Task<bool> Delete(Vulnerability vulnerability)
    {
        _context.Remove(vulnerability);
        return await _context.SaveChangesAsync() > 0;
    }
}
