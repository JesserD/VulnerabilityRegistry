
using Application.Core;
using AutoMapper;
using AutoMapper.QueryableExtensions;
using FluentValidation;
using MediatR;
using Microsoft.EntityFrameworkCore;
using Persistence;

namespace Application.Vulnerabilities;

public class Details
{
    public class Query : IRequest<Result<VulnerabilityDto>>
    {
        public required string Id { get; set; }
    }

    public class QueryValidator : AbstractValidator<Query>
    {
        public QueryValidator()
        {
            RuleFor(x => x.Id).SetValidator(new IdValidator());
        }
    }

    public class Handler : IRequestHandler<Query, Result<VulnerabilityDto>>
    {
        private readonly DataContext _context;
        private readonly IMapper _mapper;
        public Handler(DataContext context, IMapper mapper)
        {
            _mapper = mapper;
            _context = context;
        }

        public async Task<Result<VulnerabilityDto>> Handle(Query request, CancellationToken cancellationToken)
        {
            var validationResult = new QueryValidator().Validate(request);

            if (!validationResult.IsValid)
                return Result<VulnerabilityDto>.Failure(validationResult.ToString(" "));

            var vulnerability = await _context.Vulnerabilities
                .ProjectTo<VulnerabilityDto>(_mapper.ConfigurationProvider)
                .SingleOrDefaultAsync(x => x.Id == request.Id);

            return Result<VulnerabilityDto>.Success(vulnerability);
        }
    }
}