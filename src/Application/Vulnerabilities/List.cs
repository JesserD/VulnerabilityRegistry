using Application.Core;
using AutoMapper;
using AutoMapper.QueryableExtensions;
using MediatR;
using Persistence;

namespace Application.Vulnerabilities;
public class List
{
    public class Query : IRequest<Result<PagedList<VulnerabilityDto>>>
    {
        public required VulnerabilityParams Params { get; set; }
    }
    public class Handler : IRequestHandler<Query, Result<PagedList<VulnerabilityDto>>>
    {
        private readonly DataContext _context;
        private readonly IMapper _mapper;
        public Handler(DataContext context, IMapper mapper)
        {
            _mapper = mapper;
            _context = context;
        }

        public async Task<Result<PagedList<VulnerabilityDto>>> Handle(Query request, CancellationToken cancellationToken)
        {
            var query = _context.Vulnerabilities
                .ProjectTo<VulnerabilityDto>(_mapper.ConfigurationProvider)
                .AsQueryable();

            return Result<PagedList<VulnerabilityDto>>.Success(
                await PagedList<VulnerabilityDto>.CreateAsync(query, request.Params.PageNumber, request.Params.PageSize)
            );
        }
    }

}