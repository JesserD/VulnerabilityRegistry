using Application.Core;
using AutoMapper;
using AutoMapper.QueryableExtensions;
using MediatR;
using Persistence;
using System.Linq.Expressions;

namespace Application.Vulnerabilities;
public class List
{
    public class Query : IRequest<Result<PagedList<VulnerabilityDto>>>
    {
        public required VulnerabilityParams Params { get; set; }
    }
    public class Handler : IRequestHandler<Query, Result<PagedList<VulnerabilityDto>>>
    {
        private readonly DataContext _context;
        private readonly IMapper _mapper;
        public Handler(DataContext context, IMapper mapper)
        {
            _mapper = mapper;
            _context = context;
        }

        public async Task<Result<PagedList<VulnerabilityDto>>> Handle(Query request, CancellationToken cancellationToken)
        {
            var query = _context.Vulnerabilities
                .ProjectTo<VulnerabilityDto>(_mapper.ConfigurationProvider)
                .AsQueryable();

            if (!string.IsNullOrEmpty(request.Params.SearchTerm))
                query = query.Where(v => v.Name.Contains(request.Params.SearchTerm));

            if (request.Params.SortOrder == SortOrder.desc)
                query = query.OrderByDescending(GetSortProperty(request.Params.SortColumn));
            else
                query = query.OrderBy(GetSortProperty(request.Params.SortColumn));

            return Result<PagedList<VulnerabilityDto>>.Success(
                await PagedList<VulnerabilityDto>.CreateAsync(query, request.Params.PageNumber, request.Params.PageSize)
            );
        }

        private static Expression<Func<VulnerabilityDto, object>> GetSortProperty(SortColumn sortColumn) =>
            sortColumn switch
            {
                SortColumn.Created => vulnerability => vulnerability.Created,
                SortColumn.Modified => vulnerability => vulnerability.Modified,
                _ => vulnerability => vulnerability.Created
            };
    }

}