using Application.Core;
using Domain;
using FluentValidation;
using MediatR;
using Persistence;

namespace Application.Vulnerabilities;

public class Create
{
    public class Command : IRequest<Result<Unit>>
    {
        public required Vulnerability Vulnerability { get; set; }
    }

    public class CommandValidator : AbstractValidator<Command>
    {
        public CommandValidator()
        {
            RuleFor(x => x.Vulnerability.Type).Equal("vulnerability").WithMessage("Type must be 'vulnerability'.");
            RuleFor(x => x.Vulnerability.SpecVersion).Must(Vulnerability.IsValidSpecVersion).WithMessage("SpecVersion must be either 2.0 or 2.1");
            RuleFor(x => x.Vulnerability.Id).SetValidator(new IdValidator());
            RuleFor(x => x.Vulnerability.Created).NotNull().NotEmpty();
            RuleFor(x => x.Vulnerability.Modified).NotNull().NotEmpty();
        }
    }

    public class Handler : IRequestHandler<Command, Result<Unit>>
    {
        private readonly DataContext _context;
        public Handler(DataContext context)
        {
            _context = context;
        }

        public async Task<Result<Unit>> Handle(Command request, CancellationToken cancellationToken)
        {
            var validationResult = new CommandValidator().Validate(request);

            if (!validationResult.IsValid)
                return Result<Unit>.Failure(validationResult.ToString(" "));

            var vulnerability = await _context.Vulnerabilities.FindAsync(request.Vulnerability.Id);

            if (vulnerability is not null)
                return Result<Unit>.Failure("There is already a vulnerability with this Id");

            _context.Vulnerabilities.Add(request.Vulnerability);

            var result = await _context.SaveChangesAsync() > 0;

            if (!result) return Result<Unit>.Failure("Failed to create vulnerability");

            return Result<Unit>.Success(Unit.Value);
        }
    }
}