using Application.Core;
using AutoMapper;
using Domain;
using FluentValidation;
using MediatR;
using Persistence;

namespace Application.Vulnerabilities;

public class Edit
{
    public class Command : IRequest<Result<Unit>>
    {
        public string Id { get; set; }
        public UpdatedVulnerability UpdatedVulnerability { get; set; }
    }

    public class CommandValidator : AbstractValidator<Command>
    {
        public CommandValidator()
        {
            RuleFor(x => x.Id).SetValidator(new IdValidator());
            RuleFor(x => x.UpdatedVulnerability).NotNull().WithMessage("There must be an object in the body");
        }
    }

    public class Handler(IVulnerabilityRepository _vulnerabilityRepository, IMapper _mapper) : IRequestHandler<Command, Result<Unit>>
    {
        public async Task<Result<Unit>> Handle(Command request, CancellationToken cancellationToken)
        {
            var validationResult = new CommandValidator().Validate(request);

            if (!validationResult.IsValid)
                return Result<Unit>.Failure(validationResult.ToString(" "));

            if (!string.IsNullOrEmpty(request.UpdatedVulnerability.SpecVersion) &&
                !Vulnerability.IsValidSpecVersion(request.UpdatedVulnerability.SpecVersion))
                return Result<Unit>.Failure("SpecVersion must be either 2.0 or 2.1");

            var vulnerability = await _vulnerabilityRepository.GetById(request.Id);
            if (vulnerability is null)
                return Result<Unit>.Failure($"No vulnerability with the given Id '{request.Id}' to update"); ;

            var result = await _vulnerabilityRepository.Update(request.Id, _mapper.Map<Vulnerability>(request.UpdatedVulnerability));
            if (!result) return Result<Unit>.Failure("Failed to update vulnerability");

            return Result<Unit>.Success(Unit.Value);
        }
    }
}
